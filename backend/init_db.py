#!/usr/bin/env python3
"""
Honeypot Attack Map - Script d'initialisation de la base de donn√©es
Script pour cr√©er et initialiser la base de donn√©es SQLite
"""

import sys
import os
import logging
from datetime import datetime

# Ajouter le r√©pertoire backend au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import init_database, check_database_connection, get_database_info, get_table_stats
from models import Attack, AttackStats

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    """Fonction principale d'initialisation"""
    print("üóÑÔ∏è  Initialisation de la base de donn√©es Honeypot Attack Map")
    print("=" * 60)
    
    try:
        # V√©rifier la connexion √† la base de donn√©es
        print("üîç V√©rification de la connexion √† la base de donn√©es...")
        if not check_database_connection():
            print("‚ùå Impossible de se connecter √† la base de donn√©es")
            return 1
        
        print("‚úÖ Connexion √† la base de donn√©es OK")
        
        # Afficher les informations sur la base de donn√©es
        print("\nüìä Informations sur la base de donn√©es:")
        info = get_database_info()
        for key, value in info.items():
            print(f"   {key}: {value}")
        
        # Initialiser la base de donn√©es
        print("\nüîß Initialisation des tables...")
        init_database()
        print("‚úÖ Tables cr√©√©es avec succ√®s")
        
        # V√©rifier les statistiques
        print("\nüìà Statistiques de la base de donn√©es:")
        stats = get_table_stats()
        for key, value in stats.items():
            print(f"   {key}: {value}")
        
        print("\nüéâ Initialisation termin√©e avec succ√®s!")
        print("\nüìù Prochaines √©tapes:")
        print("   1. Lancer le serveur: python main.py")
        print("   2. G√©n√©rer des donn√©es de test: python populate_fake_attacks.py")
        print("   3. Acc√©der √† l'API: http://localhost:8000/docs")
        
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation: {e}")
        print(f"\n‚ùå Erreur: {e}")
        return 1

def reset_database():
    """R√©initialise compl√®tement la base de donn√©es"""
    print("üîÑ R√©initialisation de la base de donn√©es...")
    
    try:
        from database import reset_database
        reset_database()
        print("‚úÖ Base de donn√©es r√©initialis√©e")
        return 0
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©initialisation: {e}")
        return 1

def show_help():
    """Affiche l'aide du script"""
    print("""
üóÑÔ∏è  Script d'initialisation de la base de donn√©es

Usage:
    python init_db.py              # Initialise la base de donn√©es
    python init_db.py --reset      # R√©initialise la base de donn√©es
    python init_db.py --help       # Affiche cette aide

Options:
    --reset    Supprime et recr√©e toutes les tables (ATTENTION: supprime toutes les donn√©es!)
    --help     Affiche cette aide

Exemples:
    # Initialisation normale
    python init_db.py
    
    # R√©initialisation compl√®te
    python init_db.py --reset
    """)

if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "--reset":
            exit_code = reset_database()
        elif sys.argv[1] == "--help":
            show_help()
            exit_code = 0
        else:
            print(f"‚ùå Option inconnue: {sys.argv[1]}")
            show_help()
            exit_code = 1
    else:
        exit_code = main()
    
    sys.exit(exit_code)
