"""
Honeypot Attack Map - Main FastAPI Application
Point d'entr√©e principal de l'API backend
"""

from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
import asyncio
import threading
from datetime import datetime
from typing import List, Dict, Any
import logging

from database import engine, Base, get_db
from models import Attack
from routes.attacks import router as attacks_router
from services.geoip import GeoIPService
from honeypot import HoneypotServer

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title="Honeypot Attack Map API",
    description="API pour visualiser les attaques d√©tect√©es par le honeypot",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configuration CORS pour permettre les requ√™tes depuis le frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En production, sp√©cifier les domaines autoris√©s
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Inclusion des routes
app.include_router(attacks_router, prefix="/api", tags=["attacks"])

# Service de g√©olocalisation
geoip_service = GeoIPService()

# Serveur honeypot
honeypot_server = None

# Gestionnaire des connexions WebSocket
class ConnectionManager:
    """Gestionnaire des connexions WebSocket pour le temps r√©el"""
    
    def __init__(self):
        self.active_connections: List[WebSocket] = []
    
    async def connect(self, websocket: WebSocket):
        """Accepter une nouvelle connexion WebSocket"""
        await websocket.accept()
        self.active_connections.append(websocket)
        logger.info(f"WebSocket connect√©. Total: {len(self.active_connections)}")
    
    def disconnect(self, websocket: WebSocket):
        """D√©connecter un WebSocket"""
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        logger.info(f"WebSocket d√©connect√©. Total: {len(self.active_connections)}")
    
    async def send_attack(self, attack_data: Dict[str, Any]):
        """Envoyer une nouvelle attaque √† tous les clients connect√©s"""
        if self.active_connections:
            # Cr√©er une copie de la liste pour √©viter les modifications pendant l'it√©ration
            connections = self.active_connections.copy()
            for connection in connections:
                try:
                    await connection.send_json(attack_data)
                except Exception as e:
                    logger.error(f"Erreur envoi WebSocket: {e}")
                    self.disconnect(connection)

# Instance globale du gestionnaire de connexions
manager = ConnectionManager()

@app.on_event("startup")
async def startup_event():
    """√âv√©nement de d√©marrage de l'application"""
    logger.info("üöÄ D√©marrage de l'API Honeypot Attack Map...")
    
    # Cr√©er les tables de base de donn√©es
    Base.metadata.create_all(bind=engine)
    logger.info("‚úÖ Base de donn√©es initialis√©e")
    
    # D√©marrer le serveur honeypot
    global honeypot_server
    honeypot_server = HoneypotServer(
        port=2222,
        on_attack_callback=handle_new_attack
    )
    
    # D√©marrer le honeypot dans un thread s√©par√©
    honeypot_thread = threading.Thread(target=honeypot_server.start, daemon=True)
    honeypot_thread.start()
    logger.info("üî• Honeypot d√©marr√© sur le port 2222")

@app.on_event("shutdown")
async def shutdown_event():
    """√âv√©nement d'arr√™t de l'application"""
    logger.info("üõë Arr√™t de l'API Honeypot Attack Map...")
    
    if honeypot_server:
        honeypot_server.stop()
        logger.info("‚úÖ Honeypot arr√™t√©")

async def handle_new_attack(ip_address: str, port: int, protocol: str = "TCP"):
    """
    Gestionnaire appel√© lorsqu'une nouvelle attaque est d√©tect√©e
    
    Args:
        ip_address (str): Adresse IP de l'attaquant
        port (int): Port cibl√©
        protocol (str): Protocole utilis√©
    """
    try:
        logger.info(f"üö® Nouvelle attaque d√©tect√©e: {ip_address}:{port} ({protocol})")
        
        # G√©olocaliser l'IP
        location = await geoip_service.get_location(ip_address)
        
        # Cr√©er l'objet attaque
        attack = Attack(
            ip_address=ip_address,
            port=port,
            protocol=protocol,
            country=location.get('country', 'Unknown'),
            city=location.get('city', 'Unknown'),
            latitude=location.get('latitude', 0.0),
            longitude=location.get('longitude', 0.0),
            timestamp=datetime.now()
        )
        
        # Sauvegarder en base de donn√©es
        db = next(get_db())
        try:
            db.add(attack)
            db.commit()
            db.refresh(attack)
            logger.info(f"‚úÖ Attaque sauvegard√©e avec l'ID: {attack.id}")
        finally:
            db.close()
        
        # Pr√©parer les donn√©es pour le WebSocket
        attack_data = {
            "id": attack.id,
            "ip_address": attack.ip_address,
            "port": attack.port,
            "protocol": attack.protocol,
            "country": attack.country,
            "city": attack.city,
            "latitude": attack.latitude,
            "longitude": attack.longitude,
            "timestamp": attack.timestamp.isoformat()
        }
        
        # Envoyer via WebSocket
        await manager.send_attack(attack_data)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du traitement de l'attaque: {e}")

@app.get("/")
async def root():
    """Endpoint racine avec informations sur l'API"""
    return {
        "message": "Honeypot Attack Map API",
        "version": "1.0.0",
        "status": "running",
        "honeypot_port": 2222,
        "websocket_url": "/ws",
        "docs_url": "/docs"
    }

@app.get("/health")
async def health_check():
    """V√©rification de l'√©tat de sant√© de l'API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "honeypot_running": honeypot_server is not None,
        "websocket_connections": len(manager.active_connections)
    }

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """
    Endpoint WebSocket pour recevoir les attaques en temps r√©el
    
    Le client peut se connecter √† ws://localhost:8000/ws
    pour recevoir les nouvelles attaques instantan√©ment
    """
    await manager.connect(websocket)
    try:
        while True:
            # Maintenir la connexion active
            data = await websocket.receive_text()
            logger.debug(f"Message re√ßu du client: {data}")
    except WebSocketDisconnect:
        manager.disconnect(websocket)
        logger.info("Client WebSocket d√©connect√©")

@app.get("/stats")
async def get_stats():
    """Statistiques g√©n√©rales des attaques"""
    db = next(get_db())
    try:
        # Compter le total d'attaques
        total_attacks = db.query(Attack).count()
        
        # Compter les attaques des derni√®res 24h
        from datetime import datetime, timedelta
        yesterday = datetime.now() - timedelta(days=1)
        recent_attacks = db.query(Attack).filter(Attack.timestamp >= yesterday).count()
        
        # Top 5 des pays
        from sqlalchemy import func
        top_countries = db.query(
            Attack.country,
            func.count(Attack.id).label('count')
        ).group_by(Attack.country).order_by(func.count(Attack.id).desc()).limit(5).all()
        
        # Top 5 des ports
        top_ports = db.query(
            Attack.port,
            func.count(Attack.id).label('count')
        ).group_by(Attack.port).order_by(func.count(Attack.id).desc()).limit(5).all()
        
        return {
            "total_attacks": total_attacks,
            "recent_attacks_24h": recent_attacks,
            "top_countries": [{"country": country, "count": count} for country, count in top_countries],
            "top_ports": [{"port": port, "count": count} for port, count in top_ports],
            "websocket_connections": len(manager.active_connections)
        }
    finally:
        db.close()

if __name__ == "__main__":
    # Configuration pour le d√©veloppement
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
