"""
Honeypot Attack Map - Configuration Base de Donn√©es
Configuration SQLAlchemy pour la base de donn√©es SQLite
"""

from sqlalchemy import create_engine, MetaData
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.pool import StaticPool
import os
from typing import Generator

# Configuration de la base de donn√©es
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./honeypot_attacks.db")

# Configuration sp√©ciale pour SQLite
if DATABASE_URL.startswith("sqlite"):
    # Utiliser StaticPool pour √©viter les probl√®mes de threading avec SQLite
    engine = create_engine(
        DATABASE_URL,
        connect_args={"check_same_thread": False},
        poolclass=StaticPool,
        echo=False  # Mettre √† True pour voir les requ√™tes SQL
    )
else:
    # Configuration pour PostgreSQL ou autres bases de donn√©es
    engine = create_engine(
        DATABASE_URL,
        echo=False,
        pool_pre_ping=True  # V√©rifier la connexion avant utilisation
    )

# Factory pour cr√©er les sessions
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base pour les mod√®les
Base = declarative_base()

def get_db() -> Generator[Session, None, None]:
    """
    G√©n√©rateur de sessions de base de donn√©es
    
    Cette fonction est utilis√©e comme d√©pendance FastAPI
    pour obtenir une session de base de donn√©es.
    
    Yields:
        Session: Session SQLAlchemy
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def init_database():
    """
    Initialise la base de donn√©es en cr√©ant toutes les tables
    
    Cette fonction doit √™tre appel√©e au d√©marrage de l'application
    pour s'assurer que toutes les tables existent.
    """
    try:
        # Importer tous les mod√®les pour qu'ils soient enregistr√©s
        from models import Attack, AttackStats
        
        # Cr√©er toutes les tables
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation de la base de donn√©es: {e}")
        raise

def drop_database():
    """
    Supprime toutes les tables de la base de donn√©es
    
    ‚ö†Ô∏è ATTENTION: Cette fonction supprime toutes les donn√©es!
    """
    try:
        Base.metadata.drop_all(bind=engine)
        print("üóëÔ∏è Toutes les tables ont √©t√© supprim√©es")
    except Exception as e:
        print(f"‚ùå Erreur lors de la suppression des tables: {e}")
        raise

def reset_database():
    """
    R√©initialise compl√®tement la base de donn√©es
    
    ‚ö†Ô∏è ATTENTION: Cette fonction supprime toutes les donn√©es!
    """
    print("üîÑ R√©initialisation de la base de donn√©es...")
    drop_database()
    init_database()
    print("‚úÖ Base de donn√©es r√©initialis√©e")

def get_database_info() -> dict:
    """
    Retourne des informations sur la base de donn√©es
    
    Returns:
        dict: Informations sur la configuration de la base de donn√©es
    """
    return {
        "database_url": DATABASE_URL,
        "engine_name": engine.name,
        "pool_size": engine.pool.size(),
        "checked_out_connections": engine.pool.checkedout(),
        "overflow_connections": engine.pool.overflow(),
        "tables": list(Base.metadata.tables.keys())
    }

def check_database_connection() -> bool:
    """
    V√©rifie si la connexion √† la base de donn√©es fonctionne
    
    Returns:
        bool: True si la connexion est OK
    """
    try:
        with engine.connect() as connection:
            connection.execute("SELECT 1")
        return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        return False

def get_table_stats() -> dict:
    """
    Retourne des statistiques sur les tables de la base de donn√©es
    
    Returns:
        dict: Statistiques des tables
    """
    stats = {}
    
    try:
        db = next(get_db())
        
        # Compter les attaques
        from models import Attack
        total_attacks = db.query(Attack).count()
        
        # Compter les attaques r√©centes (24h)
        from datetime import datetime, timedelta
        yesterday = datetime.utcnow() - timedelta(days=1)
        recent_attacks = db.query(Attack).filter(Attack.timestamp >= yesterday).count()
        
        # Compter les pays uniques
        unique_countries = db.query(Attack.country).distinct().count()
        
        # Compter les IPs uniques
        unique_ips = db.query(Attack.ip_address).distinct().count()
        
        stats = {
            "total_attacks": total_attacks,
            "recent_attacks_24h": recent_attacks,
            "unique_countries": unique_countries,
            "unique_ips": unique_ips,
            "database_size_mb": get_database_size()
        }
        
    except Exception as e:
        print(f"‚ùå Erreur lors du calcul des statistiques: {e}")
        stats = {"error": str(e)}
    finally:
        db.close()
    
    return stats

def get_database_size() -> float:
    """
    Calcule la taille de la base de donn√©es en MB
    
    Returns:
        float: Taille en MB
    """
    try:
        if DATABASE_URL.startswith("sqlite"):
            db_path = DATABASE_URL.replace("sqlite:///", "")
            if os.path.exists(db_path):
                size_bytes = os.path.getsize(db_path)
                return round(size_bytes / (1024 * 1024), 2)
        return 0.0
    except Exception:
        return 0.0

# Fonction utilitaire pour les migrations (si n√©cessaire)
def migrate_database():
    """
    Effectue les migrations de base de donn√©es si n√©cessaire
    
    Pour l'instant, cette fonction ne fait rien car nous utilisons
    SQLite en d√©veloppement. Dans un environnement de production
    avec PostgreSQL, on pourrait utiliser Alembic ici.
    """
    print("‚ÑπÔ∏è Aucune migration n√©cessaire pour SQLite")
    pass

if __name__ == "__main__":
    # Test de la configuration de la base de donn√©es
    print("üîß Test de la configuration de la base de donn√©es...")
    print(f"URL: {DATABASE_URL}")
    print(f"Engine: {engine.name}")
    
    if check_database_connection():
        print("‚úÖ Connexion √† la base de donn√©es OK")
        
        # Initialiser la base de donn√©es
        init_database()
        
        # Afficher les informations
        info = get_database_info()
        print(f"üìä Informations: {info}")
        
        # Afficher les statistiques
        stats = get_table_stats()
        print(f"üìà Statistiques: {stats}")
    else:
        print("‚ùå Impossible de se connecter √† la base de donn√©es")
